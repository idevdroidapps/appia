apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jetbrains.kotlin.android.extensions'
apply plugin: "androidx.navigation.safeargs.kotlin"

android {
  compileSdkVersion 29
  buildToolsVersion "29.0.3"

  defaultConfig {
    applicationId "com.example.appia"
    minSdkVersion 21
    targetSdkVersion 29
    versionCode 1
    versionName "1.0"

    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    // Read the API password and id from ./secure.properties
    def secureProps = new Properties()
    if (file("../secure.properties").exists()) {
      file("../secure.properties")?.withInputStream { secureProps.load(it) }
    }
    resValue "string", "appia_api_password", (secureProps.getProperty("APPIA_API_PASSWORD") ?: "")
    resValue "string", "appia_api_id", (secureProps.getProperty("APPIA_API_ID") ?: "")
    // To add your appia API password and id to this project:
    // 1. Rename the provided template file to secure.properties or Create a file ./secure.properties
    // 2. Add this line, where YOUR_API_PASSWORD is your API password:
    //        APPIA_API_PASSWORD="YOUR_API_PASSWORD"
    // 3. Add this line, where YOUR_API_ID is your API id:
    //        APPIA_API_ID="YOUR_API_ID"
  }
  buildFeatures{
    dataBinding true
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_1_8.toString()
  }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation 'androidx.core:core-ktx:1.3.1'
  implementation 'androidx.appcompat:appcompat:1.2.0'
  implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
  implementation "androidx.cardview:cardview:1.0.0"

  // ViewModel
  implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
  // LiveData
  implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
  // Lifecycles only (without ViewModel or LiveData)
  implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
  implementation 'androidx.legacy:legacy-support-v4:1.0.0'
  // Navigation
  implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
  implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
  //noinspection LifecycleAnnotationProcessorWithJava8
  kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
  // Glide
  implementation "com.github.bumptech.glide:glide:$glide_version"
  kapt "com.github.bumptech.glide:compiler:$glide_version"
  // WorkManager
  implementation "androidx.work:work-runtime-ktx:$work_version"
  // Retrofit
  implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
  implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$retrofit_coroutines_adapter"
  implementation "com.squareup.okhttp3:logging-interceptor:4.8.1"
  implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
  // Custom Tabs
  implementation "androidx.browser:browser:1.2.0"

  testImplementation 'junit:junit:4.13'
  androidTestImplementation 'androidx.test:rules:1.3.0-rc03'
  androidTestImplementation 'androidx.test.ext:junit:1.1.1'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

}